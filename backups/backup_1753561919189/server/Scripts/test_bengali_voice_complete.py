#!/usr/bin/env python3
"""
Comprehensive Bengali Voice System Test
‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü
"""

import requests
import json
import time
import tempfile
import os
import subprocess

def test_voice_server_status():
    """Test voice server status"""
    print("üîç Testing Voice Server Status")
    print("=" * 40)
    
    try:
        response = requests.get('http://localhost:8001/api/status')
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Voice server is running")
            print(f"   Status: {data.get('status', 'unknown')}")
            print(f"   CPU Usage: {data.get('stats', {}).get('cpu_usage', 0)}%")
            print(f"   Memory Usage: {data.get('stats', {}).get('memory_usage', 0)}%")
            print(f"   TTS Requests: {data.get('stats', {}).get('tts_requests', 0)}")
            print(f"   STT Requests: {data.get('stats', {}).get('stt_requests', 0)}")
            print(f"   Queue Size: {data.get('queue_size', 0)}")
            return True
        else:
            print(f"‚ùå Voice server returned status {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Cannot connect to voice server: {e}")
        return False

def test_bengali_tts():
    """Test Bengali TTS"""
    print("\nüéµ Testing Bengali TTS")
    print("=" * 40)
    
    test_texts = [
        "‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶õ‡¶ø‡•§ ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡•§",
        "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ñ‡ßÅ‡¶¨ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞‡•§",
        "‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶∏‡¶æ‡¶π‡¶®‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡¶ø‡•§",
        "‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ñ‡ßÅ‡¶¨ ‡¶≠‡¶æ‡¶≤‡ßã‡•§",
        "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá‡•§"
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"\nüìù Test {i}: {text}")
        
        try:
            # Test streaming TTS
            response = requests.post('http://localhost:8001/api/tts', 
                                   json={
                                       'text': text,
                                       'language': 'bn',
                                       'stream': True
                                   })
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"   ‚úÖ Streaming TTS successful")
                    print(f"   Duration: {data.get('duration', 0)}s")
                    print(f"   Queue Position: {data.get('queue_position', 0)}")
                else:
                    print(f"   ‚ùå Streaming TTS failed: {data.get('error', 'Unknown error')}")
            else:
                print(f"   ‚ùå TTS request failed: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå TTS error: {e}")
        
        time.sleep(1)  # Wait between requests

def test_english_tts():
    """Test English TTS"""
    print("\nüéµ Testing English TTS")
    print("=" * 40)
    
    test_texts = [
        "Hello, I am speaking in English.",
        "This is a test of the English voice system.",
        "The weather is nice today.",
        "Thank you for testing.",
        "Have a great day!"
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"\nüìù Test {i}: {text}")
        
        try:
            response = requests.post('http://localhost:8001/api/tts', 
                                   json={
                                       'text': text,
                                       'language': 'en',
                                       'stream': True
                                   })
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"   ‚úÖ English TTS successful")
                    print(f"   Duration: {data.get('duration', 0)}s")
                else:
                    print(f"   ‚ùå English TTS failed: {data.get('error', 'Unknown error')}")
            else:
                print(f"   ‚ùå TTS request failed: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå TTS error: {e}")
        
        time.sleep(1)

def test_voice_chat():
    """Test voice chat"""
    print("\nüí¨ Testing Voice Chat")
    print("=" * 40)
    
    test_messages = [
        "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®?",
        "‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®‡¶ü‡¶ø ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá?",
        "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡ßÄ?",
        "‡¶Ü‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
        "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§"
    ]
    
    for i, message in enumerate(test_messages, 1):
        print(f"\nüí≠ Test {i}: {message}")
        
        try:
            response = requests.post('http://localhost:8001/api/voice_chat', 
                                   json={
                                       'text': message,
                                       'language': 'bn',
                                       'stream': True
                                   })
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"   ‚úÖ Voice chat successful")
                    print(f"   Response: {data.get('response', 'No response')}")
                    print(f"   Duration: {data.get('duration', 0)}s")
                else:
                    print(f"   ‚ùå Voice chat failed: {data.get('error', 'Unknown error')}")
            else:
                print(f"   ‚ùå Voice chat request failed: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Voice chat error: {e}")
        
        time.sleep(1)

def test_voices():
    """Test available voices"""
    print("\nüé§ Testing Available Voices")
    print("=" * 40)
    
    try:
        response = requests.get('http://localhost:8001/api/voices')
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                voices = data.get('voices', [])
                print(f"‚úÖ Found {len(voices)} voices:")
                for voice in voices:
                    print(f"   - {voice.get('name', 'Unknown')} ({voice.get('id', 'Unknown')})")
                    print(f"     Languages: {voice.get('languages', [])}")
                    print(f"     Gender: {voice.get('gender', 'Unknown')}")
            else:
                print(f"‚ùå Failed to get voices: {data.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå Voices request failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Voices error: {e}")

def test_logs():
    """Test logs endpoint"""
    print("\nüìã Testing Logs")
    print("=" * 40)
    
    try:
        response = requests.get('http://localhost:8001/api/logs')
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                logs = data.get('logs', [])
                print(f"‚úÖ Found {len(logs)} recent logs:")
                for log in logs[-5:]:  # Show last 5 logs
                    print(f"   - {log.get('type', 'Unknown')} ({log.get('language', 'Unknown')})")
                    print(f"     Time: {log.get('timestamp', 'Unknown')}")
                    print(f"     Processing: {log.get('processing_time_ms', 0)}ms")
            else:
                print(f"‚ùå Failed to get logs: {data.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå Logs request failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Logs error: {e}")

def test_health():
    """Test health endpoint"""
    print("\nüè• Testing Health")
    print("=" * 40)
    
    try:
        response = requests.get('http://localhost:8001/api/health')
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check successful")
            print(f"   Status: {data.get('status', 'Unknown')}")
            print(f"   Audio System: {data.get('audio_system', False)}")
            print(f"   Timestamp: {data.get('timestamp', 'Unknown')}")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health check error: {e}")

def test_special_characters():
    """Test special character handling"""
    print("\nüî§ Testing Special Characters")
    print("=" * 40)
    
    test_texts = [
        "Hello #world! This is a test.",
        "‡¶Ü‡¶Æ‡¶ø @‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶õ‡¶ø‡•§ ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡•§",
        "Test with symbols: $%^&*()_+",
        "Emoji test: üòÄüéâüöÄ",
        "Mixed: Hello #‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ! üòÄ"
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"\nüìù Test {i}: {text}")
        
        try:
            response = requests.post('http://localhost:8001/api/tts', 
                                   json={
                                       'text': text,
                                       'language': 'en',
                                       'stream': True
                                   })
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"   ‚úÖ Special characters handled successfully")
                else:
                    print(f"   ‚ùå Special characters failed: {data.get('error', 'Unknown error')}")
            else:
                print(f"   ‚ùå Request failed: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
        
        time.sleep(1)

def main():
    """Main test function"""
    print("üéµ Bengali Voice System - Complete Test")
    print("=" * 50)
    
    # Test server status
    if not test_voice_server_status():
        print("\n‚ùå Voice server is not running!")
        print("Please start the voice server first:")
        print("python3 sarver/voice-server/app.py")
        return False
    
    # Run all tests
    test_bengali_tts()
    test_english_tts()
    test_voice_chat()
    test_voices()
    test_logs()
    test_health()
    test_special_characters()
    
    print("\nüéâ All tests completed!")
    print("\nüí° Next steps:")
    print("1. Access admin panel: http://localhost:3000/admin/voice")
    print("2. Test streaming and download features")
    print("3. Try voice chat with different messages")
    print("4. Check logs for performance metrics")
    
    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 