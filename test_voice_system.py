#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé§ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü
ZombieCoder AI Management System
"""

import requests
import json
import time
import os
import subprocess
import sys
from pathlib import Path

class VoiceSystemTester:
    def __init__(self):
        self.base_url = "http://localhost:8001"
        self.test_texts = [
            "‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ ‡¶¨‡¶∏, ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá",
            "‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶§‡¶æ‡¶Ü‡¶≤‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®",
            "‡¶á‡¶ö‡ßç‡¶õ‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶§‡¶æ‡¶Ü‡¶≤‡¶æ ‡¶¨‡¶æ‡¶®‡ßç‡¶¶‡¶æ‡¶¶‡ßá‡¶∞‡¶ï‡ßá ‡¶†‡¶ï‡¶æ‡¶Ø‡¶º ‡¶®‡¶æ",
            "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶Ö‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡ßç‡¶∞‡¶ø AI ‡¶∏‡ßá‡¶¨‡¶æ",
            "ZombieCoder AI Management System - ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü"
        ]
        
    def print_banner(self):
        """‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü"""
        print("üé§" + "="*60 + "üé§")
        print("    ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü - ZombieCoder AI")
        print("üé§" + "="*60 + "üé§")
        print()
        
    def test_server_health(self):
        """‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï"""
        print("üîç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶õ‡¶ø...")
        try:
            response = requests.get(f"{self.base_url}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {data['status']}")
                print(f"üìÖ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™: {data['timestamp']}")
                print(f"üîß ‡¶∏‡ßá‡¶¨‡¶æ: {data['service']}")
                print("üéØ ‡¶á‡¶û‡ßç‡¶ú‡¶ø‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:")
                for engine, status in data['engines'].items():
                    print(f"   - {engine}: {status}")
                return True
            else:
                print(f"‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
            return False
            
    def test_available_voices(self):
        """‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ö‡ßá‡¶ï"""
        print("\nüéµ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶õ‡¶ø...")
        try:
            response = requests.get(f"{self.base_url}/api/voices", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: {len(data['voices'])}")
                print("üé§ ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:")
                for voice_name, voice_info in data['voices'].items():
                    print(f"   - {voice_name}: {voice_info['language']} ({voice_info['engine']})")
                return True
            else:
                print(f"‚ùå ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ API ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ API ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
            return False
            
    def test_text_to_speech(self, text, voice="default"):
        """‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü-‡¶ü‡ßÅ-‡¶∏‡ßç‡¶™‡¶ø‡¶ö ‡¶ü‡ßá‡¶∏‡ßç‡¶ü"""
        print(f"\nüé§ TTS ‡¶ü‡ßá‡¶∏‡ßç‡¶ü: '{text[:30]}...'")
        try:
            payload = {
                "text": text,
                "voice": voice,
                "engine": "coqui"
            }
            response = requests.post(
                f"{self.base_url}/api/speak",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡ßá‡¶°: {data['audio_info']['file_path']}")
                print(f"‚è±Ô∏è ‡¶°‡ßÅ‡¶∞‡ßá‡¶∂‡¶®: {data['audio_info']['duration']:.2f} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°")
                print(f"üìä ‡¶∏‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡¶≤ ‡¶∞‡ßá‡¶ü: {data['audio_info']['sample_rate']} Hz")
                print(f"üéµ ‡¶™‡ßç‡¶≤‡ßá‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {data['playback']['status']}")
                return data['audio_info']['file_path']
            else:
                print(f"‚ùå TTS API ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {response.status_code}")
                print(f"üìù ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏: {response.text}")
                return None
        except Exception as e:
            print(f"‚ùå TTS ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
            return None
            
    def test_audio_playback(self, audio_file):
        """‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ü‡ßá‡¶∏‡ßç‡¶ü"""
        if not audio_file or not os.path.exists(audio_file):
            print("‚ùå ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
            return False
            
        print(f"\nüîä ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ü‡ßá‡¶∏‡ßç‡¶ü: {audio_file}")
        
        # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶ö‡ßá‡¶ï
        file_size = os.path.getsize(audio_file)
        print(f"üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú: {file_size:,} bytes")
        
        # FFplay ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ
        try:
            print("üéµ FFplay ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶õ‡¶ø...")
            result = subprocess.run(
                ["ffplay", "-nodisp", "-autoexit", audio_file],
                capture_output=True,
                timeout=10
            )
            if result.returncode == 0:
                print("‚úÖ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶≤‡ßá ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                return True
            else:
                print(f"‚ö†Ô∏è FFplay ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {result.stderr.decode()}")
                return False
        except FileNotFoundError:
            print("‚ö†Ô∏è FFplay ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø, ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®: sudo apt install ffmpeg")
            return False
        except subprocess.TimeoutExpired:
            print("‚úÖ ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® (‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü)")
            return True
        except Exception as e:
            print(f"‚ùå ‡¶™‡ßç‡¶≤‡ßá‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
            return False
            
    def test_voice_controls(self):
        """‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü"""
        print("\nüéõÔ∏è ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü...")
        
        controls = [
            ("pause", "‡¶™‡¶ú"),
            ("resume", "‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã"),
            ("stop", "‡¶¨‡¶®‡ßç‡¶ß")
        ]
        
        for action, description in controls:
            try:
                response = requests.get(f"{self.base_url}/api/{action}", timeout=5)
                if response.status_code == 200:
                    print(f"‚úÖ {description}: ‡¶∏‡¶´‡¶≤")
                else:
                    print(f"‚ö†Ô∏è {description}: {response.status_code}")
            except Exception as e:
                print(f"‚ùå {description}: {e}")
                
    def test_status_endpoint(self):
        """‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ü‡ßá‡¶∏‡ßç‡¶ü"""
        print("\nüìä ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ü‡ßá‡¶∏‡ßç‡¶ü...")
        try:
            response = requests.get(f"{self.base_url}/api/status", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {data.get('status', 'unknown')}")
                print(f"üéµ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏: {data.get('current_voice', 'unknown')}")
                return True
            else:
                print(f"‚ùå ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ API ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
            return False
            
    def run_comprehensive_test(self):
        """‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∞‡¶æ‡¶®"""
        self.print_banner()
        
        # 1. ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï
        if not self.test_server_health():
            print("‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• - ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶®‡ßç‡¶ß")
            return False
            
        # 2. ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶ö‡ßá‡¶ï
        if not self.test_available_voices():
            print("‚ö†Ô∏è ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ")
            
        # 3. ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü
        self.test_status_endpoint()
        
        # 4. ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤
        self.test_voice_controls()
        
        # 5. TTS ‡¶ü‡ßá‡¶∏‡ßç‡¶ü
        print("\nüé§ TTS ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ...")
        success_count = 0
        
        for i, text in enumerate(self.test_texts, 1):
            print(f"\n--- ‡¶ü‡ßá‡¶∏‡ßç‡¶ü {i}/{len(self.test_texts)} ---")
            audio_file = self.test_text_to_speech(text)
            
            if audio_file:
                if self.test_audio_playback(audio_file):
                    success_count += 1
                    print(f"‚úÖ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü {i} ‡¶∏‡¶´‡¶≤")
                else:
                    print(f"‚ö†Ô∏è ‡¶ü‡ßá‡¶∏‡ßç‡¶ü {i} ‡¶™‡ßç‡¶≤‡ßá‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ")
            else:
                print(f"‚ùå ‡¶ü‡ßá‡¶∏‡ßç‡¶ü {i} TTS ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ")
                
            # ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡¶ø‡¶∞‡¶§‡¶ø
            time.sleep(2)
            
        # ‡¶´‡¶≤‡¶æ‡¶´‡¶≤
        print("\n" + "="*60)
        print(f"üéØ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶´‡¶≤‡¶æ‡¶´‡¶≤: {success_count}/{len(self.test_texts)} ‡¶∏‡¶´‡¶≤")
        
        if success_count == len(self.test_texts):
            print("üéâ ‡¶∏‡¶¨ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡¶´‡¶≤! ‡¶≠‡¶Ø‡¶º‡ßá‡¶∏ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶™‡¶æ‡¶∞‡¶´‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá")
        elif success_count > 0:
            print("‚ö†Ô∏è ‡¶Ü‡¶Ç‡¶∂‡¶ø‡¶ï ‡¶∏‡¶´‡¶≤ - ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶õ‡ßá")
        else:
            print("‚ùå ‡¶∏‡¶¨ ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• - ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ")
            
        return success_count > 0

def main():
    """‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    tester = VoiceSystemTester()
    
    try:
        success = tester.run_comprehensive_test()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 